{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","components/Header.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","className","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","to","React","PropTypes","shape","string","number","func","MovieCard","src","alt","Header","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","loading","redirect","getMovieData","a","movieAPI","match","params","MovieDetails","fetchMovie","removeMovie","MovieList","moviesData","fetchMovies","NewMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAYeA,E,4JATb,WACE,OACE,8BACE,oD,GAJcC,a,gBCEhBC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAL,eAAkBD,EAAME,OACxB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,gDAMnB,YAEEC,EADqBC,KAAKN,MAAlBK,UACCC,KAAKL,S,yBAGhB,SAAYM,EAAOC,GACjBF,KAAKG,SAAL,eAAiBF,EAAQC,M,8BAG3B,WAAoB,IAAD,OACTE,EAAUJ,KAAKL,MAAfS,MAER,OACE,8BACE,wBAAOC,QAAQ,cAAf,sBAEE,8BACE,uBACEC,YAAY,qBACZC,GAAG,cACHC,KAAK,OACLC,UAAU,WACVC,MAAQN,EACRO,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,QAASD,EAAME,OAAOJ,mB,iCAQzE,WAAuB,IAAD,OACZK,EAAaf,KAAKL,MAAlBoB,SAER,OACE,8BACE,wBAAOV,QAAQ,iBAAf,yBAEE,8BACE,uBACEC,YAAY,wBACZC,GAAG,iBACHC,KAAK,OACLE,MAAQK,EACRJ,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,WAAYD,EAAME,OAAOJ,mB,kCAQ5E,WAAwB,IAAD,OACbM,EAAchB,KAAKL,MAAnBqB,UAER,OACE,qBAAKP,UAAU,MAAf,SACE,wBAAOJ,QAAQ,cAAf,mBAEE,8BACE,uBACEC,YAAY,6BACZC,GAAG,cACHC,KAAK,OACLE,MAAQM,EACRL,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,mB,kCAQ7E,WAAwB,IAAD,OACbO,EAAcjB,KAAKL,MAAnBsB,UAER,OACE,8BACE,wBAAOZ,QAAQ,kBAAf,oBAEE,8BACE,0BACEE,GAAG,kBACHG,MAAQO,EACRN,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,mB,kCAQ7E,WAAwB,IAAD,OACbQ,EAAUlB,KAAKL,MAAfuB,MACR,OACE,8BACE,wBAAOb,QAAQ,cAAf,sBAEE,8BACE,yBACEE,GAAG,cACHG,MAAQQ,EACRP,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,QAASD,EAAME,OAAOJ,QAH/D,UAKE,wBAAQA,MAAM,SAAd,wBACA,wBAAQA,MAAM,SAAd,wBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,UAAd,kC,+BAQZ,WAAqB,IAAD,OACVS,EAAWnB,KAAKL,MAAhBwB,OACR,OACE,8BACE,wBAAOd,QAAQ,eAAf,4BAEE,uBACEC,YAAY,mCACZC,GAAG,eACHC,KAAK,SACLY,KAAO,GACPC,IAAM,EACNC,IAAM,EACNZ,MAAQS,EACRR,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,SAAUD,EAAME,OAAOJ,iB,gCAOxE,WACE,OACE,8BACE,wBACEF,KAAK,SACLe,QAAUvB,KAAKH,aAFjB,wB,oBAUN,WACE,OACE,gCACE,uBAAMY,UAAU,aAAhB,UACGT,KAAKwB,mBACLxB,KAAKyB,sBACLzB,KAAK0B,uBACL1B,KAAK2B,uBACL3B,KAAK4B,uBACL5B,KAAK6B,oBACL7B,KAAK8B,wBAER,cAAC,IAAD,CAAMC,GAAG,IAAItB,UAAU,SAAvB,2B,GAxKgBuB,IAAMxC,WA4LfC,GAdyBwC,IAAhCC,MAAgCD,IAAzBE,OAAyBF,IAAjBG,OAAiBH,IAATI,KAchB5C,GC5LT6C,E,4JACJ,WACE,MAAiEtC,KAAKN,MAA9DE,MAASW,EAAjB,EAAiBA,GAAIH,EAArB,EAAqBA,MAAOW,EAA5B,EAA4BA,SAAUE,EAAtC,EAAsCA,UAAWD,EAAjD,EAAiDA,UACjD,OACE,0BAAS,cAAY,aAAaP,UAAU,aAA5C,UACE,oBAAIA,UAAU,mBAAd,SAAmCL,IACnC,qBAAKmC,IAAMvB,EAAYwB,IAAMpC,EAAQK,UAAU,qBAC/C,oBAAIA,UAAU,sBAAd,SAAsCM,IACtC,mBAAGN,UAAU,uBAAb,SAAsCQ,IACtC,cAAC,IAAD,CAAMc,GAAE,kBAAcxB,GAAOE,UAAU,OAAvC,iC,GATgBuB,IAAMxC,WA2Bf8C,GAZmBL,IAA1BC,MAA0BD,IAAnBE,OAAmBF,IAAXG,OAYRE,GCnBAG,E,4JATb,WACE,OACE,wBAAQhC,UAAU,oBAAlB,SACE,oBAAIA,UAAU,aAAd,uC,GAJauB,IAAMxC,W,QCmDZkD,EArDA,CACb,CACEnC,GAAI,EACJH,MAAO,cACPW,SAAU,mBACVE,UAAW,iKACXE,OAAQ,IACRH,UAAW,0CACX2B,YAAY,EACZzB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPW,SAAU,iBACVE,UAAW,4HACXE,OAAQ,IACRH,UAAW,0CACX2B,YAAY,EACZzB,MAAO,WAET,CACEX,GAAI,EACJH,MAAO,qBACPW,SAAU,qBACVE,UAAW,qJACXE,OAAQ,EACRH,UAAW,oCACX2B,YAAY,EACZzB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,kBACPW,SAAU,kBACVE,UAAW,2LACXE,OAAQ,IACRH,UAAW,6BACX2B,YAAY,EACZzB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPW,SAAU,WACVE,UAAW,iKACXE,OAAQ,IACRH,UAAW,oCACX2B,YAAY,EACZzB,MAAO,YC/CX0B,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,IAE9C,IAAMC,EAAa,kBAAMH,KAAKI,MAAMN,aAAaO,QAAQ,YACnDC,EAAa,SAACV,GAAD,OAAYE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,KAGvEW,EAAiB,KASjBC,EAAkB,SAACC,GAAD,OAAc,SAACC,GACrCC,YAAW,WACTD,EAASD,KAZG,OAuBHG,EAAW,SAACC,GACvB,IAAM/D,EAAQqD,IAAaW,MAAK,SAACC,GAAD,OAASA,EAAItD,KAAOuD,SAASH,EAAS,OACtE,OAAO,IAAII,SAAQ,SAACC,GAClBV,EAAgB1D,EAAhB0D,CAAuBU,OAIdnD,EAAc,SAACoD,GAAD,OACzB,IAAIF,SAAQ,SAACC,GACX,IAAMtB,EAASO,IAAaiB,KAAI,SAACtE,GAC/B,OAAIA,EAAMW,KAAOuD,SAASG,EAAa1D,GAAI,IAClC,2BAAKX,GAAUqE,GAEjBrE,KAETwD,EAAWV,GACXY,EAAgBD,EAAhBC,CAAgCU,OAIvBG,EAAc,SAACC,GAAD,OACzB,IAAIL,SAAQ,SAACC,GACX,IAAItB,EAASO,IACPoB,EAAS3B,EAAOA,EAAO4B,OAAS,GAAG/D,GAAK,EACxCgE,EAAQ,2BAAQH,GAAR,IAAmB7D,GAAI8D,IACrC3B,EAAM,sBAAOA,GAAP,CAAe6B,IACrBnB,EAAWV,GACXY,EAAgBD,EAAhBC,CAAgCU,OAIvBQ,EAAc,SAACb,GAC1B,IAAIjB,EAASO,IAIb,OAHAP,EAASA,EAAO+B,QAAO,SAAC7E,GAAD,OAAWA,EAAMW,KAAOuD,SAASH,EAAS,OACjEP,EAAWV,GAEJ,IAAIqB,SAAQ,SAACC,GAClBV,EAAgB,CAAEoB,OAAQrB,GAA1BC,CAA4CU,OC5D1CW,E,kDACJ,WAAYjF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPgF,SAAS,EACTC,UAAU,GAEZ,EAAKhF,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKgF,aAAe,EAAKA,aAAahF,KAAlB,gBARH,E,qDAWnB,WACEE,KAAK8E,iB,iEAGP,WAAmBb,GAAnB,SAAAc,EAAA,sEACQC,EAAqBf,GAD7B,OAEEjE,KAAKG,SAAS,CACZ0E,UAAU,IAHd,gD,wHAOA,8BAAAE,EAAA,6DAC6BxE,EAAWP,KAAKN,MAAnCuF,MAASC,OAAU3E,GAD7B,SAEsByE,EAAkBzE,GAFxC,OAEQX,EAFR,OAIEI,KAAKG,SAAS,CACZyE,SAAS,EACThF,UANJ,gD,0EAUA,WACE,MAAqCI,KAAKL,MAAlCiF,EAAR,EAAQA,QAAShF,EAAjB,EAAiBA,MAEjB,OAFA,EAAwBiF,SAEH,cAAC,IAAD,CAAU9C,GAAG,6BAC9B6C,EAAgB,cAAC,EAAD,IAGlB,qBAAK,cAAY,aAAjB,SACE,cAAC,EAAD,CAAWhF,MAAQA,EAAQG,SAAWC,KAAKH,qB,GAzC3BL,aAyDTmF,GAVW1C,IAAlBC,MAAkBD,IAAXE,OAUAwC,GCzDTQ,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKxF,MAAQ,CACXiF,SAAS,EACThF,MAAO,IAGT,EAAKwF,WAAa,EAAKA,WAAWtF,KAAhB,gBAClB,EAAKuF,YAAc,EAAKA,YAAYvF,KAAjB,gBATP,E,qDAYd,WACEE,KAAKoF,e,+DAGP,8BAAAL,EAAA,6DAC6BxE,EAAWP,KAAKN,MAAnCuF,MAASC,OAAU3E,GAD7B,SAE0ByE,EAAkBzE,GAF5C,OAEQ6D,EAFR,OAGEpE,KAAKG,SAAS,CACZyE,SAAS,EACThF,MAAOwE,IALX,gD,sHASA,WAAkB7D,GAAlB,SAAAwE,EAAA,sEACQC,EAAqBzE,GAD7B,2C,2EAIA,WAAU,IAAD,OAIP,EAIIP,KAAKL,MAJT,IACEC,MACEW,EAFJ,EAEIA,GAAIH,EAFR,EAEQA,MAAOa,EAFf,EAEeA,UAAWD,EAF1B,EAE0BA,UAAWE,EAFrC,EAEqCA,MAAOC,EAF5C,EAE4CA,OAAQJ,EAFpD,EAEoDA,SAIpD,OANA,EAGE6D,QAIU,cAAC,EAAD,IACR,gCACE,0BAAS,cAAY,gBAAgBnE,UAAU,aAA/C,UACE,oBAAIA,UAAU,mBAAd,0BAA6CL,KAC7C,qBACEoC,IAAI,cACJD,IAAG,aAASvB,GACZP,UAAU,qBAEZ,mBAAGA,UAAU,sBAAb,6BAAkDM,KAClD,mBAAGN,UAAU,uBAAb,8BAAoDQ,KACpD,6CAAeC,KACf,8CAAgBC,QAElB,cAAC,IAAD,CAAMY,GAAE,kBAAcxB,EAAd,SAA0BE,UAAU,SAA5C,oBACA,cAAC,IAAD,CACEsB,GAAG,2BACHR,QAAU,kBAAM,EAAK8D,YAAY9E,IACjCE,UAAU,SAHZ,qBAOA,cAAC,IAAD,CAAMsB,GAAG,2BAA2BtB,UAAU,SAA9C,2B,GA/DiBjB,aAgFZ2F,GAVWlD,IAAlBC,MAAkBD,IAAXE,OAUAgD,GCxBAG,E,kDApDb,aAAe,IAAD,8BACZ,gBAeFC,WAAa,SAAC7C,GAAD,OACXA,EAAOwB,KACL,SAACtE,GAAD,OACE,cAAC,EAAD,CAA+BA,MAAQA,EAAQa,UAAU,mBAAxCb,EAAMQ,WAhB3B,EAAKT,MAAQ,CACX+C,OAAQ,GACRkC,SAAS,GAGX,EAAKY,YAAc,EAAKA,YAAY1F,KAAjB,gBACnB,EAAKyF,WAAa,EAAKA,WAAWzF,KAAhB,gBATN,E,4FAYd,sBAAAiF,EAAA,sDACE/E,KAAKwF,cADP,gD,sHAYA,4BAAAT,EAAA,sEHXA,IAAIhB,SAAQ,SAACC,GACX,IAAMtB,EAASO,IACfK,EAAgBZ,EAAhBY,CAAwBU,MGS1B,OACQuB,EADR,OAEEvF,KAAKG,SAAS,CACZuC,OAAQ6C,EACRX,SAAS,IAJb,gD,0EAQA,WACE,MAA4B5E,KAAKL,MAAzB+C,EAAR,EAAQA,OAAQkC,EAAhB,EAAgBA,QAGhB,OACE,gCACE,iCACE,cAAC,EAAD,IACA,yBAAS,cAAY,aAAanE,UAAU,aAA5C,SACImE,EAAU,cAAC,EAAD,IAAc5E,KAAKuF,WAAW7C,QAG9C,iCACE,cAAC,IAAD,CAAMX,GAAG,cAActB,UAAU,WAAjC,0C,GA9CcjB,aC0BTiG,E,kDA7Bb,WAAY/F,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXkF,UAAU,GAGZ,EAAKhF,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,uFAUnB,WAAmByE,GAAnB,SAAAQ,EAAA,sEACQC,EAAqBT,GAD7B,OAEEvE,KAAKG,SAAS,CACZ0E,UAAU,IAHd,gD,2EAOA,WAEE,OADqB7E,KAAKL,MAAlBkF,SAEK,cAAC,IAAD,CAAU9C,GAAG,6BAEpB,qBAAK,cAAY,YAAjB,SACE,cAAC,EAAD,CAAWhC,SAAWC,KAAKH,qB,GAxBhBL,aCQRkG,E,4JAVb,WACE,OACE,sBAAK,cAAY,YAAjB,wCAEE,cAAC,IAAD,CAAM3D,GAAG,2BAA2BtB,UAAU,OAA9C,sC,GALejB,a,MC0BRmG,MAdf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,2BAA2BC,UAAYR,IACzD,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,cAAcC,UAAYL,IAC5C,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,cAAcC,UAAYX,IAC5C,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,mBAAmBC,UAAYnB,IACjD,cAAC,IAAD,CAAOkB,KAAK,IAAIC,UAAYJ,UCXhBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36f68c5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>\n        <p>Carregando...</p>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n          <div>\n            <input\n              placeholder=\"Insira o título\"\n              id=\"movie_title\"\n              type=\"text\"\n              className=\"validate\"\n              value={ title }\n              onChange={ (event) => this.updateMovie('title', event.target.value) }\n            />\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <div>\n            <input\n              placeholder=\"Insira o subtítulo\"\n              id=\"movie_subtitle\"\n              type=\"text\"\n              value={ subtitle }\n              onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n            />\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <div>\n            <input\n              placeholder=\"Insira o caminho da imagem\"\n              id=\"movie_image\"\n              type=\"text\"\n              value={ imagePath }\n              onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n            />\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <div>\n            <textarea\n              id=\"movie_storyline\"\n              value={ storyline }\n              onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n            />\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <div>\n            <select\n              id=\"movie_genre\"\n              value={ genre }\n              onChange={ (event) => this.updateMovie('genre', event.target.value) }\n            >\n              <option value=\"action\">Ação</option>\n              <option value=\"comedy\">Comédia</option>\n              <option value=\"thriller\">Suspense</option>\n              <option value=\"fantasy\">Fantasia</option>\n            </select>\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"movie-card\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n        <Link to=\"/\" className=\"button\">Voltar</Link>\n      </div>\n    );\n  }\n}\n\nconst { shape, string, number, func } = PropTypes;\n\nMovieForm.propTypes = {\n  movie: shape({\n    title: string,\n    subtitle: string,\n    imagePath: string,\n    storyline: string,\n    genre: string,\n    rating: number,\n  }),\n  onSubmit: func,\n}.isRequired;\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, subtitle, storyline, imagePath } } = this.props;\n    return (\n      <section data-testid=\"movie-card\" className=\"movie-card\">\n        <h4 className=\"movie-card-title\">{ title }</h4>\n        <img src={ imagePath } alt={ title } className=\"movie-card-image\" />\n        <h5 className=\"movie-card-subtitle\">{ subtitle }</h5>\n        <p className=\"movie-card-storyline\">{ storyline }</p>\n        <Link to={ `/movies/${id}` } className=\"link\">VER DETALHES</Link>\n      </section>\n    );\n  }\n}\n\nconst { shape, string, number } = PropTypes;\n\nMovieCard.propTypes = {\n  movie: shape({\n    id: number,\n    title: string,\n    subtitle: string,\n    storyline: string,\n    imagePath: string,\n  }),\n}.isRequired;\n\nexport default MovieCard;\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      loading: true,\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovieData = this.getMovieData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieData();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  async getMovieData() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n\n    this.setState({\n      loading: false,\n      movie,\n    });\n  }\n\n  render() {\n    const { loading, movie, redirect } = this.state;\n\n    if (redirect) return <Redirect to=\"/movie-card-library-crud\" />;\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nconst { shape, string } = PropTypes;\n\nEditMovie.propTypes = {\n  match: shape({\n    params: shape({\n      id: string,\n    }),\n  }),\n}.isRequired;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: true,\n      movie: [],\n    };\n\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.removeMovie = this.removeMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movieData = await movieAPI.getMovie(id);\n    this.setState({\n      loading: false,\n      movie: movieData,\n    });\n  }\n\n  async removeMovie(id) {\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n\n    const {\n      movie:\n      { id, title, storyline, imagePath, genre, rating, subtitle },\n      loading,\n    } = this.state;\n\n    return (\n      loading ? <Loading /> : (\n        <div>\n          <section data-testid=\"movie-details\" className=\"movie-card\">\n            <h2 className=\"movie-card-title\">{ `Title: ${title}` }</h2>\n            <img\n              alt=\"Movie Cover\"\n              src={ `../${imagePath}` }\n              className=\"movie-card-image\"\n            />\n            <p className=\"movie-card-subtitle\">{ `Subtitle: ${subtitle}` }</p>\n            <p className=\"movie-card-storyline\">{ `Storyline: ${storyline}` }</p>\n            <p>{ `Genre: ${genre}` }</p>\n            <p>{ `Rating: ${rating}` }</p>\n          </section>\n          <Link to={ `/movies/${id}/edit` } className=\"button\">EDITAR</Link>\n          <Link\n            to=\"/movie-card-library-crud\"\n            onClick={ () => this.removeMovie(id) }\n            className=\"button\"\n          >\n            DELETAR\n          </Link>\n          <Link to=\"/movie-card-library-crud\" className=\"button\">VOLTAR</Link>\n        </div>\n      )\n    );\n  }\n}\n\nconst { shape, string } = PropTypes;\n\nMovieDetails.propTypes = {\n  match: shape({\n    params: shape({\n      id: string,\n    }),\n  }),\n}.isRequired;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  MovieCard,\n  Loading,\n  Header,\n} from '../components/index';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n\n    this.fetchMovies = this.fetchMovies.bind(this);\n    this.moviesData = this.moviesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.fetchMovies();\n  }\n\n  moviesData = (movies) => (\n    movies.map(\n      (movie) => (\n        <MovieCard key={ movie.title } movie={ movie } className=\"movie-card-body\" />\n      ),\n    )\n  );\n\n  async fetchMovies() {\n    const moviesData = await movieAPI.getMovies();\n    this.setState({\n      movies: moviesData,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    // console.log(movies);\n    // Render Loading here if the request is still happening\n    return (\n      <div>\n        <main>\n          <Header />\n          <section data-testid=\"movie-list\" className=\"movie-list\">\n            { loading ? <Loading /> : this.moviesData(movies) }\n          </section>\n        </main>\n        <footer>\n          <Link to=\"/movies/new\" className=\"add-card\">ADICIONAR CARTÃO</Link>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const { redirect } = this.state;\n    return (\n      redirect ? <Redirect to=\"/movie-card-library-crud\" />\n        : (\n          <div data-testid=\"new-movie\">\n            <MovieForm onSubmit={ this.handleSubmit } />\n          </div>\n        )\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div data-testid=\"404-error\">\n        Página não encontrada\n        <Link to=\"/movie-card-library-crud\" className=\"link\">Página Inicial</Link>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport {\n  MovieDetails,\n  EditMovie,\n  MovieList,\n  NewMovie,\n  NotFound,\n} from './pages/index';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/movie-card-library-crud\" component={ MovieList } />\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}